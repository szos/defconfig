#+TITLE: DEFCONFIG

* Purpose
  Defconfig is a customization and validation framework for places in CL. Its intended use is to supplement or replace existing ~defvar~ and ~defparameter~ forms with a ~defconfig~ form. This will generate the appropriate ~def(var|parameter)~ form as well as a configuration object which is used to validate values for that place. It can also be used with accessors, either specific to a place or in general, by providing =(accessorfn *myplace*)= or ~(accessorfn)~ for the place variable. See examples.lisp for more details. This system provides two macros, ~defconfig~ and ~setv~. ~setv~ can be used in place of setf to validate a value before setting it. ~setf~ can still be used as per usual. 

** Regarding This Readme

  Please note that this readme is likely out of date with regard to the arguments and minutae of how the macros/functions/errors function, and by no means is a complete list of exported symbols. Please see =package.lisp= for a list of exported symbols and see the symbol docstrings for a better idea of what the function/macro/generic/error/etc does. Most (exported) functions/macros are well documented, accessors have decent slot documentation describing their purpose/use, and errors should be grokkable from their ~:report~ functions. Do note that currently accessors are exported, but they should not be depended upon, and instead readers will be exported. 

* A Note About Reset-Place
  The macro ~reset-place~ (and by extension the function ~reset-computed-place~) could be a little confusing. It takes a place, and resets it to its default value. However if ~previous-value~ is true, then it resets to the previous value instead. Before setting, it checks if the current value is eql to the value to reset to (this can be controlled with ~already-reset-test~) and if it is it isnt reset as it would have no effect. If it isnt, we both reset the place, AND set the ~previous-value~ slot to the (now no longer) current value. thusly, if the default value is a, previous value is b, and current value is c, and we reset to the default value, we will have a default of a, previous of c, and current of a. If we had instead reset to the previous value, we effectively swap the previous and current values. 
  Furthermore, we cannot reset any accessor places at the moment

* Macros
** Defconfig
   The ~defconfig~ macro generates a config-info object and registers it in a database. The signature is *defconfig* /place default-value &key validator valid-values coercer reinitialize regen-config test documentation tags/ => /config-info/
*** Arguments and Values
**** place
     a place to register a config-info object for. This should be the same as what you would use in ~setf~. If this is a symbol it is placed in the variable hash. if it is a list, it is placed in the accessor hash. When being placed in the accessor hash, there are two possible config-info objects. If the list is of length one, we register a config-info object for all calls to that accessor. If the list length is greater than one, we register a config-info object for that accessor and argument. Hence, we can have a config-info object for ~(accessor ...)~ and an object for ~(accessor *somevar*)~. When we use ~setv~ on ~(accessor *somevar*)~ we will use second object, but if we use it on ~(accessor *othervar*)~ we will use the first object. 
**** default-value 
     This is the default value for place /place/. It is stored in the config-info object. 
**** validator
     This is the predicate used to validate potential values. It must take one argument and return truthy or false. 
**** typespec
     When provided, a predicate function is built to check any potential values against this typespec. /typespec/ and /validator/ are mutually exclusive. If neither are provided, the identity function is used for /validator/.
**** coercer
     When provided, coercion is attempted on any invalid values using this function. This function should return the original value if it is unable to coerce a value acceptably. 
**** reinitialize
     When truthy, variables will be created/reinitialized using defparameter. When /place/ is an accessor, it is set to /default-value/ using ~setf~. 
**** regen-config
     When true, the config-info object is regenerated, regardless of whether it exists or not. 
**** documentation
     the docstring for /place/, stored in the config-info object. If place is a variable, then the appropriate ~def(var|parameter)~ form is generated to use it. 
**** tags
     These are used for searching for a config-info object. 
**** db
     The database into which the resulting config-info object will be placed. A database can be generated with ~make-config-database~.
** Setv
   The ~setv~ macro expands into multiple calls to ~%setv~, which validates a value before setting the place to it. It functions the same as ~setf~, but accepts the keyword ~:db~ to specify a database other than the default one provided by ~defconfig~. 
** Setv-atomic
   The ~setv-atomic~ macro functions the same as ~setv~, but if any errors are encountered all places are reset to their original value. 
** With-atomic-setv
   The ~with-atomic-setv~ macro resets any places set with ~setv~ to the value the held before ~with-atomic-setv~ when an error is encountered. Unless ~:re-error~ is nil, ~setv-wrapped-error~ is signalled with the ~condition~ slot holding our original error. If no condition is signalled the final form of ~body~ is returned. 
** Reset-place 
   The ~reset-place~ macro resets the place to the default value provided by the corresponding config-info object found within the database. If no object is found ~no-config-found-error~ is signalled.

* Functions
** make-config-database 
   This function takes no arguments and returns a config database. 
** config-info-search 
   This function takes a /term/ to search for, and key arguments for the database and the namespace to search within. /Term/ can be a string, a list of strings, or a symbol/accessor. /Namespace/ is only used when /term/ is a string or list of strings. /Db/ specifies the database to look things up in. 
* Errors
** Invalid-datum-error  
   This error is signalled if one tries to set a place to an invalid value. 
** invalid-coerced-datum-error
   This error is signalled instead of ~invalid-datum-error~ when a place has a coercer registered for it. It inherits from ~invalid-datum-error~. 
** no-config-found-error
   This error is signalled if a place has no config registered for it. 
