#+TITLE: DEFCONFIG

* Purpose
  Defconfig is a customization and validation framework for places in CL. Its intended use is to supplement or replace existing ~defvar~ and ~defparameter~ forms with a ~defconfig~ form. This will generate the appropriate ~def(var|parameter)~ form as well as a configuration object which is used to validate values for that place. It can also be used with accessors, either specific to a place or in general, by providing =(accessorfn *myplace*)= or ~(accessorfn)~ for the place variable. See examples.lisp for more details. This system provides two macros, ~defconfig~ and ~setv~. ~setv~ can be used in place of setf to validate a value before setting it. ~setf~ can still be used as per usual. 

* Usage
** Defconfig
   The ~defconfig~ macro generates a config-info object and registers it in a database. The signature is *defconfig* /place default-value &key validator valid-values coercer reinitialize regen-config test documentation tags/ => /config-info/
*** Arguments and Values
**** place
     a place to register a config-info object for. This should be the same as what you would use in ~setf~. If this is a symbol it is placed in the variable hash. if it is a list, it is placed in the accessor hash. When being placed in the accessor hash, there are two possible config-info objects. If the list is of length one, we register a config-info object for all calls to that accessor. If the list length is greater than one, we register a config-info object for that accessor and argument. Hence, we can have a config-info object for ~(accessor ...)~ and an object for ~(accessor *somevar*)~. When we use ~setv~ on ~(accessor *somevar*)~ we will use second object, but if we use it on ~(accessor *othervar*)~ we will use the first object. 
**** default-value 
     This is the default value for place /place/. It is stored in the config-info object. 
**** validator
     This is the predicate used to validate potential values. It must take one argument and return truthy or false. 
**** valid-values 
     When provided, a predicate function is built to check any potential values against this list. /valid-values/ and /validator/ are mutually exclusive. If neither are provided, the identity function is used for /validator/.
**** coercer
     When provided, coercion is attempted on any invalid values using this function. This function should return the original value if it is unable to coerce a value acceptably. 
**** reinitialize
     When truthy, variables will be created/reinitialized using defparameter. When /place/ is an accessor, it is set to /default-value/ using ~setf~. 
**** regen-config
     When true, the config-info object is regenerated, regardless of whether it exists or not. 
**** test 
     This is the function used for the test key argument to ~member~ for the predicate generated by /valid-values/.
**** documentation
     the docstring for /place/, stored in the config-info object. If place is a variable, then the appropriate ~def(var|parameter)~ form is generated to use it. 
**** tags
     These are used for searching for a config-info object. 
